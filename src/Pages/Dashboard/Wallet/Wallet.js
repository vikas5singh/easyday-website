import React, { useEffect, useState } from "react";
import Accordion from "react-bootstrap/Accordion";
import { useDispatch, useSelector } from "react-redux";
import Fade from "react-reveal/Fade";
import { toast } from "react-toastify";
import {
  Button,
  Form,
  FormGroup,
  Label,
  Input,
  FormText,
  Row,
  Col,
} from "reactstrap";
import {
  delCard,
  paymentList,
  addMoney,
  getProfile,
} from "../../../Redux/actions";
import StripePaymentForm from "./AddCard";

export default function Wallet() {
  const [cardshow, setcardshow] = useState(false);
  const [data, setData] = useState({
    wallet: "",
    paymentSourceRef: "",
    currency: "usd",
    payment_method: "stripe",

  });
  // console.log(val, "val");
  const [cardId, setcardId] = useState({});
  const dispatch = useDispatch();

  const list = useSelector((s) => s.address.paymentList);
  const wallet = useSelector((s) => s.profile.profile?.wallet);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setData((pre) => ({
      ...pre,
      [name]: Number(value),
    }));
  };
  console.log("list========>", list);
  const handleSubmit = (e) => {
    e.preventDefault();
    const callBack = (response) => {
      console.log(response, "wallletstatus");
      if (response.status == "success") {
        toast.success(response.message);
        setData((pre) => ({
          ...pre,
          wallet: "",
          paymentSourceRef: data.paymentSourceRef,
          payment_method: "stripe",
        }));
      } else {
        toast.error(
          response.message == "paymentSourceRefNo parameter missing!"
            ? "Please Select Card First !"
            : response.message
        );
      }
      dispatch(getProfile({}));
      dispatch(paymentList({}));
    };
    dispatch(addMoney({ ...data, ...cardId }, callBack));
  };

  const handleDelete = (e, Id) => {
    e.preventDefault();

    const callBack = () => {
      setTimeout(() => {
        dispatch(paymentList({}));
      }, 500);
    };
    dispatch(delCard({ _id: Id }, callBack));
  };

  useEffect(() => {
    dispatch(paymentList({}));
    dispatch(getProfile({}));
  }, [dispatch]);

  return (
    <section className="FAQ-main wallet-main">
      <StripePaymentForm show={cardshow} onHide={() => setcardshow(false)} />
      <Fade>
        <div className="wallet-part">
          <div className="add-card">
            <div className="add-cardcont">
              <h3>Your Payment Details</h3>
              <p>Supreme Save Payment Details for Future Orders</p>
            </div>
            <div className="add-cardbtn">
              <Button className="add-card" onClick={() => setcardshow(true)}>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="26"
                  height="26"
                  viewBox="0 0 26 26"
                  fill="none"
                >
                  <path
                    d="M14.625 11.375V0H11.375V11.375H0V14.625H11.375V26H14.625V14.625H26V11.375H14.625Z"
                    fill="white"
                  />
                </svg>
                Add Card
              </Button>
            </div>
          </div>
          <div className="select-method">
            <h5 className="text-center">Select Method</h5>
            <Form className="select-method">
              <div className="wallet-wrap">
                <div className="walletprice">
                  <div className="wallet-cont">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="31"
                      height="30"
                      viewBox="0 0 31 30"
                      fill="none"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M28.5158 26.5385V20.7692H29.3916C29.6995 20.7692 29.9949 20.6306 30.2126 20.384C30.4303 20.1373 30.5526 19.8027 30.5526 19.4538V10.5462C30.5526 10.1973 30.4303 9.86272 30.2126 9.61604C29.9949 9.36935 29.6995 9.23077 29.3916 9.23077H28.5158V3.46154C28.5158 2.54348 28.1939 1.66303 27.6209 1.01386C27.048 0.364697 26.2708 0 25.4605 0H3.05526C2.24496 0 1.46784 0.364697 0.894866 1.01386C0.321893 1.66303 0 2.54348 0 3.46154L0 26.5385C0 27.4565 0.321893 28.337 0.894866 28.9861C1.46784 29.6353 2.24496 30 3.05526 30H25.4605C26.2708 30 27.048 29.6353 27.6209 28.9861C28.1939 28.337 28.5158 27.4565 28.5158 26.5385ZM28.5158 11.5385V18.4615H19.35C18.5397 18.4615 17.7626 18.0968 17.1896 17.4477C16.6166 16.7985 16.2947 15.9181 16.2947 15C16.2947 14.0819 16.6166 13.2015 17.1896 12.5523C17.7626 11.9032 18.5397 11.5385 19.35 11.5385H28.5158Z"
                        fill="#2196F3"
                      />
                    </svg>
                    <h5>Wallet</h5>
                  </div>

                  <div className="wallet-money">
                    <h4>Rs {wallet}</h4>
                  </div>
                </div>
                <FormGroup className="mt-5">
                  <Input
                    type="number"
                    name="wallet"
                    value={data?.wallet}
                    id="exampleEmail"
                    placeholder="Add Money 0.00"
                    className="add-money"
                    onChange={handleChange}
                  />
                </FormGroup>
              </div>

              <div className="payment-select">
                <Row>
                  {list?.cardsList &&
                    list?.cardsList.length > 0 &&
                    list?.cardsList.map((item, index) => {
                      console.log(item, "item123");
                      return (
                        <>
                          {item.payment_method == "stripe" && (
                            <Col lg={6} md={12} sm={12} key={index}>
                              <div className="add-card-bottom">
                                <div class="inputGroup">
                                  <input
                                    id={"option1" + index}
                                    name="paymentSourceRef"
                                    type="checkbox"
                                    checked={
                                      cardId?.paymentSourceRef === item._id
                                    }
                                    onChange={() =>
                                      setcardId({
                                        paymentSourceRef: item._id,
                                      })
                                    }
                                  // checked={cardId.includes(item._id)}
                                  />
                                  <label for={"option1" + index}>
                                    <div className="card-cont-col">
                                      {/* <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="30"
                                    height="30"
                                    viewBox="0 0 30 30"
                                    fill="none"
                                  >
                                    <path
                                      d="M27.2872 19.9648V19.6538H27.2087L27.1179 19.8674L27.0276 19.6538H26.9487V19.9648H27.0044V19.7303L27.0893 19.9327H27.1471L27.2319 19.7298V19.9648H27.2872ZM26.7893 19.9648V19.7068H26.89V19.6543H26.6333V19.7068H26.734V19.9648H26.7893Z"
                                      fill="#F79410"
                                    />
                                    <path
                                      d="M18.3855 21.3008H11.6087V8.71582H18.3855V21.3008Z"
                                      fill="#FF5F00"
                                    />
                                    <path
                                      d="M12.0422 15.006C12.0422 12.4531 13.1989 10.179 15.0002 8.71349C13.683 7.64184 12.0205 7.00221 10.2137 7.00221C5.93641 7.00221 2.46915 10.5856 2.46915 15.006C2.46915 19.4264 5.93641 23.0098 10.2137 23.0098C12.0205 23.0098 13.683 22.3701 15.0002 21.2985C13.1989 19.833 12.0422 17.5589 12.0422 15.006Z"
                                      fill="#EB001B"
                                    />
                                    <path
                                      d="M27.5284 15.0035C27.5284 19.424 24.0611 23.0073 19.7838 23.0073C17.977 23.0073 16.3146 22.3677 14.9968 21.296C16.7986 19.8305 17.9554 17.5565 17.9554 15.0035C17.9554 12.4506 16.7986 10.1765 14.9968 8.71105C16.3146 7.6394 17.977 6.99977 19.7838 6.99977C24.0611 6.99977 27.5284 10.5831 27.5284 15.0035Z"
                                      fill="#F79E1B"
                                    />
                                  </svg> */}
                                      **** {item.last4digit}
                                    </div>
                                    <a
                                      onClick={(e) => handleDelete(e, item._id)}
                                    >
                                      <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        width="20"
                                        height="20"
                                        viewBox="0 0 20 20"
                                        fill="none"
                                      >
                                        <path
                                          d="M9.25373 3.0751e-08C10.073 -0.000108826 10.8627 0.288794 11.4678 0.809983C12.0729 1.33117 12.4497 2.04699 12.5242 2.8169H17.6119C17.8388 2.81697 18.0572 2.8983 18.223 3.04448C18.3888 3.19065 18.4896 3.39076 18.5051 3.60437C18.5206 3.81799 18.4495 4.02917 18.3063 4.19527C18.1632 4.36136 17.9585 4.46997 17.7337 4.49916L17.6119 4.50704H16.9158L15.8484 13.2394H13.4328C13.0871 13.2394 12.7487 13.3339 12.4586 13.5114C12.1685 13.6888 11.939 13.9418 11.7979 14.2396C11.6567 14.5374 11.61 14.8675 11.6632 15.1898C11.7164 15.5122 11.8674 15.8132 12.0979 16.0563C11.8036 16.3659 11.6411 16.7672 11.6418 17.1831C11.6418 17.6158 11.8137 18.0113 12.0979 18.3099C11.9427 18.4721 11.8233 18.6637 11.7433 18.8732H5.47701C4.89116 18.8733 4.32572 18.6702 3.88826 18.3024C3.4508 17.9347 3.17185 17.4281 3.10448 16.8789L1.59045 4.50704H0.895522C0.679119 4.50703 0.470039 4.43308 0.306948 4.29885C0.143858 4.16463 0.037789 3.97922 0.00835817 3.7769L0 3.66197C9.12585e-06 3.45776 0.0783793 3.26046 0.220617 3.10656C0.362855 2.95265 0.559339 2.85256 0.773731 2.82479L0.895522 2.8169H5.98328C6.05776 2.04699 6.43454 1.33117 7.03965 0.809983C7.64475 0.288794 8.43447 -0.000108826 9.25373 3.0751e-08ZM7.46269 7.04225C7.17015 7.04225 6.92537 7.2169 6.87522 7.44676L6.86567 7.53578V14.4372L6.87522 14.5251C6.92537 14.7549 7.17015 14.9296 7.46269 14.9296C7.75522 14.9296 8 14.7549 8.05015 14.5251L8.0597 14.4361V7.5369L8.05015 7.44676C8 7.21803 7.75522 7.04225 7.46269 7.04225ZM11.0448 7.04225C10.7522 7.04225 10.5075 7.2169 10.4573 7.44676L10.4478 7.53578V14.4372L10.4573 14.5251C10.5075 14.7549 10.7522 14.9296 11.0448 14.9296C11.3373 14.9296 11.5821 14.7549 11.6322 14.5251L11.6418 14.4361V7.5369L11.6322 7.44676C11.5821 7.21803 11.3373 7.04338 11.0448 7.04338V7.04225ZM9.25373 1.69014C8.53134 1.69014 7.92836 2.17465 7.79104 2.8169H10.7164C10.5779 2.17465 9.97612 1.69014 9.25373 1.69014ZM12.8358 14.9296C12.8358 14.7802 12.8987 14.6369 13.0107 14.5312C13.1226 14.4256 13.2745 14.3662 13.4328 14.3662H19.403C19.5613 14.3662 19.7132 14.4256 19.8251 14.5312C19.9371 14.6369 20 14.7802 20 14.9296C20 15.079 19.9371 15.2223 19.8251 15.3279C19.7132 15.4336 19.5613 15.493 19.403 15.493H13.4328C13.2745 15.493 13.1226 15.4336 13.0107 15.3279C12.8987 15.2223 12.8358 15.079 12.8358 14.9296ZM12.8358 17.1831C12.8358 17.0337 12.8987 16.8904 13.0107 16.7847C13.1226 16.6791 13.2745 16.6197 13.4328 16.6197H19.403C19.5613 16.6197 19.7132 16.6791 19.8251 16.7847C19.9371 16.8904 20 17.0337 20 17.1831C20 17.3325 19.9371 17.4758 19.8251 17.5815C19.7132 17.6871 19.5613 17.7465 19.403 17.7465H13.4328C13.2745 17.7465 13.1226 17.6871 13.0107 17.5815C12.8987 17.4758 12.8358 17.3325 12.8358 17.1831ZM12.8358 19.4366C12.8358 19.2872 12.8987 19.1439 13.0107 19.0382C13.1226 18.9326 13.2745 18.8732 13.4328 18.8732H19.403C19.5613 18.8732 19.7132 18.9326 19.8251 19.0382C19.9371 19.1439 20 19.2872 20 19.4366C20 19.586 19.9371 19.7293 19.8251 19.835C19.7132 19.9406 19.5613 20 19.403 20H13.4328C13.2745 20 13.1226 19.9406 13.0107 19.835C12.8987 19.7293 12.8358 19.586 12.8358 19.4366Z"
                                          fill="#EE5A5F"
                                        />
                                      </svg>
                                    </a>
                                  </label>
                                </div>
                              </div>
                            </Col>
                          )}
                        </>
                      );
                    })}
                  {/* <Col lg={6} md={12} sm={12}>
                    <div className="add-card-bottom">
                      <div class="inputGroup">
                        <input id="option2" name="option2" type="checkbox" />
                        <label for="option2">
                          <div className="card-cont-col">
                            <img
                              src="images/cards.png"
                              alt=""
                              className="img-fluid"
                            />
                            **** 3704
                          </div>
                          <a href="javascript:void(0)">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="20"
                              height="20"
                              viewBox="0 0 20 20"
                              fill="none"
                            >
                              <path
                                d="M9.25373 3.0751e-08C10.073 -0.000108826 10.8627 0.288794 11.4678 0.809983C12.0729 1.33117 12.4497 2.04699 12.5242 2.8169H17.6119C17.8388 2.81697 18.0572 2.8983 18.223 3.04448C18.3888 3.19065 18.4896 3.39076 18.5051 3.60437C18.5206 3.81799 18.4495 4.02917 18.3063 4.19527C18.1632 4.36136 17.9585 4.46997 17.7337 4.49916L17.6119 4.50704H16.9158L15.8484 13.2394H13.4328C13.0871 13.2394 12.7487 13.3339 12.4586 13.5114C12.1685 13.6888 11.939 13.9418 11.7979 14.2396C11.6567 14.5374 11.61 14.8675 11.6632 15.1898C11.7164 15.5122 11.8674 15.8132 12.0979 16.0563C11.8036 16.3659 11.6411 16.7672 11.6418 17.1831C11.6418 17.6158 11.8137 18.0113 12.0979 18.3099C11.9427 18.4721 11.8233 18.6637 11.7433 18.8732H5.47701C4.89116 18.8733 4.32572 18.6702 3.88826 18.3024C3.4508 17.9347 3.17185 17.4281 3.10448 16.8789L1.59045 4.50704H0.895522C0.679119 4.50703 0.470039 4.43308 0.306948 4.29885C0.143858 4.16463 0.037789 3.97922 0.00835817 3.7769L0 3.66197C9.12585e-06 3.45776 0.0783793 3.26046 0.220617 3.10656C0.362855 2.95265 0.559339 2.85256 0.773731 2.82479L0.895522 2.8169H5.98328C6.05776 2.04699 6.43454 1.33117 7.03965 0.809983C7.64475 0.288794 8.43447 -0.000108826 9.25373 3.0751e-08ZM7.46269 7.04225C7.17015 7.04225 6.92537 7.2169 6.87522 7.44676L6.86567 7.53578V14.4372L6.87522 14.5251C6.92537 14.7549 7.17015 14.9296 7.46269 14.9296C7.75522 14.9296 8 14.7549 8.05015 14.5251L8.0597 14.4361V7.5369L8.05015 7.44676C8 7.21803 7.75522 7.04225 7.46269 7.04225ZM11.0448 7.04225C10.7522 7.04225 10.5075 7.2169 10.4573 7.44676L10.4478 7.53578V14.4372L10.4573 14.5251C10.5075 14.7549 10.7522 14.9296 11.0448 14.9296C11.3373 14.9296 11.5821 14.7549 11.6322 14.5251L11.6418 14.4361V7.5369L11.6322 7.44676C11.5821 7.21803 11.3373 7.04338 11.0448 7.04338V7.04225ZM9.25373 1.69014C8.53134 1.69014 7.92836 2.17465 7.79104 2.8169H10.7164C10.5779 2.17465 9.97612 1.69014 9.25373 1.69014ZM12.8358 14.9296C12.8358 14.7802 12.8987 14.6369 13.0107 14.5312C13.1226 14.4256 13.2745 14.3662 13.4328 14.3662H19.403C19.5613 14.3662 19.7132 14.4256 19.8251 14.5312C19.9371 14.6369 20 14.7802 20 14.9296C20 15.079 19.9371 15.2223 19.8251 15.3279C19.7132 15.4336 19.5613 15.493 19.403 15.493H13.4328C13.2745 15.493 13.1226 15.4336 13.0107 15.3279C12.8987 15.2223 12.8358 15.079 12.8358 14.9296ZM12.8358 17.1831C12.8358 17.0337 12.8987 16.8904 13.0107 16.7847C13.1226 16.6791 13.2745 16.6197 13.4328 16.6197H19.403C19.5613 16.6197 19.7132 16.6791 19.8251 16.7847C19.9371 16.8904 20 17.0337 20 17.1831C20 17.3325 19.9371 17.4758 19.8251 17.5815C19.7132 17.6871 19.5613 17.7465 19.403 17.7465H13.4328C13.2745 17.7465 13.1226 17.6871 13.0107 17.5815C12.8987 17.4758 12.8358 17.3325 12.8358 17.1831ZM12.8358 19.4366C12.8358 19.2872 12.8987 19.1439 13.0107 19.0382C13.1226 18.9326 13.2745 18.8732 13.4328 18.8732H19.403C19.5613 18.8732 19.7132 18.9326 19.8251 19.0382C19.9371 19.1439 20 19.2872 20 19.4366C20 19.586 19.9371 19.7293 19.8251 19.835C19.7132 19.9406 19.5613 20 19.403 20H13.4328C13.2745 20 13.1226 19.9406 13.0107 19.835C12.8987 19.7293 12.8358 19.586 12.8358 19.4366Z"
                                fill="#EE5A5F"
                              />
                            </svg>
                          </a>
                        </label>
                      </div>
                    </div>
                  </Col> */}
                </Row>
                <button
                  class="save-btn btn btn-secondary"
                  onClick={handleSubmit}
                >
                  Add Money
                </button>
              </div>
            </Form>
          </div>
        </div>
      </Fade>
    </section>
  );
}
